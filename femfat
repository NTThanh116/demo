# coding: cp932
import imp
import ftplib
import os
import matplotlib.pyplot as plt
import re
import numpy as np
from math import log10
from decimal import Decimal, ROUND_HALF_UP
from subprocess import Popen, PIPE
from collections import namedtuple
import matplotlib.font_manager as font_manager

#===============================================================================
def clean_up_white_space(str):
    return re.sub(r"\s+", " ", str.strip())
#===============================================================================

def get_critical_node_group():
    crit_nodes = []
    with open("critical_node_group.txt", "r") as f:
        for line in f:
            line = line.strip()
            if line == "":
                pass
            else:
                try:
                    crit_nodes.append(int(line))
                except:
                    pass
    return crit_nodes

#===============================================================================
def extract_node_data_in_ff_pro_file(critical_node_group, ff_pro_file):
    profile_nodal_data = dict()
    write_data = []
    found_nodes = []
    with open(ff_pro_file, "r") as f:
        pf = f.readlines()

    count = 0
    i = 0
    in_finding_curve_data_flag = False
    number_of_fetched_data = 0

    while i < len(pf):
        if pf[i].strip()[0:10].lower() == "node label:":
            node_id = clean_up_white_space(pf[i].strip()).split(" ")[-1]
            if int(node_id) not in critical_node_group:
                i = i + 20
                in_finding_curve_data_flag = False
                number_of_fetched_data = 0
            else:
                found_nodes.append(int(node_id))
                i = i + 6
                damage_total = pf[i].strip().split(" ")[-1]
                in_finding_curve_data_flag = True
                i = i + 3

        elif in_finding_curve_data_flag:
            if pf[i].strip()[0:17] == "Damage mechanical":
                Damage_mechanical = pf[i].strip().split(" ")[-1]
                number_of_fetched_data = number_of_fetched_data + 1
            elif pf[i].strip()[0:13] == "Most critical":
                Most_critical_1 = pf[i].strip().split(" ")[-1]
                Most_critical_2 = pf[i].strip().split(" ")[-4]
                Most_critical_2_1 = Most_critical_2.strip(",")[0]
                number_of_fetched_data = number_of_fetched_data + 1
            elif pf[i].strip()[0:15] == "delta gamma max":
                delta_gamma_max = pf[i].strip().split(" ")[-1]
                number_of_fetched_data = number_of_fetched_data + 1
            elif pf[i].strip()[0:15] == "delta epsilon nn":
                delta_epsilon_nn = pf[i].strip().split(" ")[-1]
                number_of_fetched_data = number_of_fetched_data + 1
            elif pf[i].strip()[0:18] == "Normal strain rate":
                Normal_strain_rate = pf[i].strip().split(" ")[-3]
                number_of_fetched_data = number_of_fetched_data + 1
            elif pf[i].strip()[0:19] == "Effective oxidation":
                Effective_oxidation = pf[i].strip().split(" ")[-1]
                number_of_fetched_data = number_of_fetched_data + 1
            elif pf[i].strip()[0:17] == "Oxidation Phasing":
                Oxidation_Phasing = pf[i].strip().split(" ")[-1]
                number_of_fetched_data = number_of_fetched_data + 1
            elif pf[i].strip()[0:20] == "Damage environmental":
                Damage_environmental = pf[i].strip().split(" ")[-1]
                number_of_fetched_data = number_of_fetched_data + 1
            elif pf[i].strip()[0:13] == "Creep Phasing":
                Creep_Phasing = pf[i].strip().split(" ")[-1]
                number_of_fetched_data = number_of_fetched_data + 1
            elif pf[i].strip()[0:12] == "Damage creep":
                Damage_creep = pf[i].strip().split(" ")[-1]
                number_of_fetched_data = number_of_fetched_data + 1

            if number_of_fetched_data == 10:
                in_finding_curve_data_flag = False
                number_of_fetched_data = 0
                profile_nodal_data.update({node_id: (
                    Most_critical_2_1,
                    Most_critical_1,
                    damage_total,
                    delta_gamma_max,
                    Damage_mechanical,
                    delta_epsilon_nn,
                    Normal_strain_rate,
                    Effective_oxidation,
                    Oxidation_Phasing,
                    Damage_environmental,
                    Creep_Phasing,
                    Damage_creep
                )})
                i = i + 1
            else:
                i = i + 1
        else:
            i = i + 1

    return profile_nodal_data

#===============================================================================
# MASTER
#===============================================================================
critical_node_group = get_critical_node_group()
print critical_node_group

femfat_pro_file = "femfat_DIN_1p4848.pro"
profile_node_data = extract_node_data_in_ff_pro_file(critical_node_group, femfat_pro_file)
print profile_node_data

full_result_file = "test.csv"
f = open(full_result_file, "w+")
f.write("NodeID,Most_critical_1,Most_critical_2,damage_total,delta_gamma_max,Damage_mechanical,delta_epsilon_nn,Normal_strain_rate,Effective_oxidation,Oxidation_Phasing,Damage_environmental,Creep_Phasing,Damage_creep")
f.write("\n")

for key, value in profile_node_data.items():
    f = open(full_result_file, "a+")
    f.write("{0}, {1}".format(key, value))
    f.write("\n")
# [EOF]
