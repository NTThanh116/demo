# coding: cp932
import re
import csv

def clean_up_white_space(s):
    return re.sub(r"\s+", " ", s.strip())

def get_critical_node_group(path="critical_node_group.txt"):
    crit_nodes = []
    with open(path, "r", encoding="cp932", errors="ignore") as f:
        for line in f:
            line = line.strip()
            if not line:
                continue
            try:
                crit_nodes.append(int(line))
            except:
                # bỏ dòng không phải số
                pass
    return crit_nodes  # GIỮ THỨ TỰ NHƯ TRONG FILE

def extract_node_data_in_ff_pro_file(critical_node_group, ff_pro_file):
    """
    Trả về dict: { node_id(int): {field: value, ...} }
    """
    fields = [
        "Most_critical_1","Most_critical_2","damage_total","delta_gamma_max",
        "Damage_mechanical","delta_epsilon_nn","Normal_strain_rate",
        "Effective_oxidation","Oxidation_Phasing","Damage_environmental",
        "Creep_Phasing","Damage_creep"
    ]
    data_by_node = {}

    with open(ff_pro_file, "r", encoding="cp932", errors="ignore") as f:
        pf = f.readlines()

    i = 0
    in_block = False
    fetched = 0

    # các biến tạm cho 1 node
    Most_critical_1 = Most_critical_2 = ""
    damage_total = delta_gamma_max = ""
    Damage_mechanical = delta_epsilon_nn = ""
    Normal_strain_rate = Effective_oxidation = ""
    Oxidation_Phasing = Damage_environmental = ""
    Creep_Phasing = Damage_creep = ""

    node_id_int = None

    while i < len(pf):
        line = pf[i].strip()

        if line[:10].lower() == "node label:":
            node_id = clean_up_white_space(line).split(" ")[-1]
            try:
                node_id_int = int(node_id)
            except:
                node_id_int = None

            # reset cờ và bộ đếm
            in_block = False
            fetched = 0

            # nếu node không thuộc nhóm cần lấy thì nhảy qua block tiếp theo
            if node_id_int not in critical_node_group:
                i += 20
                continue

            # node hợp lệ → chuẩn bị đọc
            i += 6
            damage_total = pf[i].strip().split(" ")[-1]
            in_block = True
            i += 3
            continue

        if in_block:
            if line[:17] == "Damage mechanical":
                Damage_mechanical = line.split(" ")[-1]
                fetched += 1
            elif line[:13] == "Most critical":
                parts = line.split(" ")
                # theo code cũ: lấy -1 và [-4]
                try:
                    Most_critical_1 = parts[-1]
                    Most_critical_2 = clean_up_white_space(line).split(",")[0].split(" ")[-1]
                except:
                    Most_critical_1 = parts[-1]
                    Most_critical_2 = ""
                fetched += 1
            elif line[:15] == "delta gamma max":
                delta_gamma_max = line.split(" ")[-1]
                fetched += 1
            elif line[:15] == "delta epsilon nn":
                delta_epsilon_nn = line.split(" ")[-1]
                fetched += 1
            elif line[:18] == "Normal strain rate":
                Normal_strain_rate = line.split(" ")[-1]
                fetched += 1
            elif line[:19] == "Effective oxidation":
                Effective_oxidation = line.split(" ")[-1]
                fetched += 1
            elif line[:17] == "Oxidation Phasing":
                Oxidation_Phasing = line.split(" ")[-1]
                fetched += 1
            elif line[:20] == "Damage environmental":
                Damage_environmental = line.split(" ")[-1]
                fetched += 1
            elif line[:13] == "Creep Phasing":
                Creep_Phasing = line.split(" ")[-1]
                fetched += 1
            elif line[:12] == "Damage creep":
                Damage_creep = line.split(" ")[-1]
                fetched += 1

            # đủ 10 chỉ số → lưu lại theo node_id_int
            if fetched == 10 and node_id_int is not None:
                data_by_node[node_id_int] = {
                    "Most_critical_1": Most_critical_1,
                    "Most_critical_2": Most_critical_2,
                    "damage_total": damage_total,
                    "delta_gamma_max": delta_gamma_max,
                    "Damage_mechanical": Damage_mechanical,
                    "delta_epsilon_nn": delta_epsilon_nn,
                    "Normal_strain_rate": Normal_strain_rate,
                    "Effective_oxidation": Effective_oxidation,
                    "Oxidation_Phasing": Oxidation_Phasing,
                    "Damage_environmental": Damage_environmental,
                    "Creep_Phasing": Creep_Phasing,
                    "Damage_creep": Damage_creep,
                }
                in_block = False
                fetched = 0

        i += 1

    return data_by_node

# ---------------- MASTER ----------------
if __name__ == "__main__":
    critical_node_group = get_critical_node_group()   # GIỮ THỨ TỰ INPUT
    femfat_pro_file = "femfat_DIN_1p4848.pro"
    data_by_node = extract_node_data_in_ff_pro_file(critical_node_group, femfat_pro_file)

    headers = [
        "NodeID","Most_critical_1","Most_critical_2","damage_total","delta_gamma_max",
        "Damage_mechanical","delta_epsilon_nn","Normal_strain_rate",
        "Effective_oxidation","Oxidation_Phasing","Damage_environmental",
        "Creep_Phasing","Damage_creep"
    ]

    out = "test.csv"
    with open(out, "w", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        w.writerow(headers)
        for nid in critical_node_group:  # <-- GHI THEO THỨ TỰ INPUT
            rec = data_by_node.get(nid, {})
            row = [nid] + [rec.get(h, "") for h in headers[1:]]
            w.writerow(row)
